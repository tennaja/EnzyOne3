import { formatTimestampData, unique } from "@/utils/function";
import dayjs from "dayjs";
var utc = require("dayjs/plugin/utc");
import ExecuteQuery, { ConnectDB } from "@/utils/db";
import { NextResponse } from "next/server";
import { getPeopleCounting, getRecommend } from "@/utils/emsService";
import sql, { pool } from "mssql";

export async function GET(request, { params }) {
  /*  const { searchParams } = new URL(request.url);
  const id = searchParams.get("id") ?? 1; */

  switch (parseInt(params.modelId)) {
    case 5: {
      let response = await doModel5();
      return NextResponse.json(response);
    }
    case 6: {
      let response = await doModel6();
      return NextResponse.json(response);
    }
    default:
      return NextResponse.json(params);
  }
}

async function doModel5() {
  const req = {
    start_datetime: dayjs().format("YYYY-MM-DD HH:00:00"),
    end_datetime: dayjs().format("YYYY-MM-DD HH:59:59"),
  };
  // const recommendResponse = await getRecommend(req);

  const recommendResponse = model5ExampleResponse;

  let responseArray = [];
  for (let index = 0; index < recommendResponse.timestamp.length; index++) {
    let responseObject = {
      timestamp: recommendResponse.timestamp[index],
      actual_solar: recommendResponse.actual_solar[index],
      actual_load: recommendResponse.actual_load[index],
      actual_suggest: recommendResponse.actual_suggest[index],
      predict_solar: recommendResponse.predict_solar[index],
      predict_load: recommendResponse.predict_load[index],
      predict_suggest: recommendResponse.predict_suggest[index],
      peak_hour: recommendResponse.peak_hour[index],
      has_error: recommendResponse.has_error[index],
      error_message: recommendResponse.error_message[index],
    };
    responseArray.push(responseObject);
  }

  // Insert To Database
  const table = new sql.Table("EMS_Model5_Result_TEMP");
  table.create = true;
  table.columns.add("timestamp", sql.DateTime, { nullable: false });
  table.columns.add("actual_solar", sql.VarChar(sql.MAX));
  table.columns.add("actual_load", sql.VarChar(sql.MAX));
  table.columns.add("actual_suggest", sql.VarChar(sql.MAX));
  table.columns.add("predict_solar", sql.VarChar(sql.MAX));
  table.columns.add("predict_load", sql.VarChar(sql.MAX));
  table.columns.add("predict_suggest", sql.VarChar(sql.MAX));
  table.columns.add("peak_hour", sql.VarChar(50));
  table.columns.add("has_error", sql.VarChar(50));
  table.columns.add("error_message", sql.VarChar(255));

  dayjs.extend(utc);
  responseArray.forEach((item) => {
    table.rows.add(
      dayjs.utc(item.timestamp).local().format("YYYY-MM-DD HH:mm:ss.SSS"),
      item.actual_solar,
      item.actual_load,
      item.actual_suggest,
      item.predict_solar,
      item.predict_load,
      item.predict_suggest,
      item.peak_hour,
      item.has_error,
      item.error_message
    );
  });
  let pool = await ConnectDB();
  let request = pool.request();
  try {
    const result = await request.bulk(table);
    // console.log("result", result);
  } catch (err) {
    // console.log("INSERT INTO TEMP Error", err);
  }

  var insertSQL = `INSERT INTO EMS_Model5_Result (timestamp, actual_solar, actual_load, actual_suggest, predict_solar , predict_load, predict_suggest, peak_hour, has_error, error_message) SELECT timestamp, actual_solar, actual_load, actual_suggest, predict_solar , predict_load, predict_suggest, peak_hour, has_error, error_message FROM EMS_Model5_Result_TEMP WHERE Timestamp NOT IN (SELECT timestamp FROM EMS_Model5_Result)`;

  try {
    const result = await request.query(insertSQL);
    // console.log("result", result);

    var removeDataSQL = `TRUNCATE TABLE EMS_Model5_Result_TEMP`;
    const removeResult = await request.query(removeDataSQL);
  } catch (error) {
    // console.log("INSERT QUERY error", error);
  }
  return responseArray;
}

async function doModel6() {
  var req = {
    start_datetime: dayjs()
      .subtract(17, "minute")
      .format("YYYY-MM-DD HH:mm:00"),
    end_datetime: dayjs().format("YYYY-MM-DD HH:mm:ss"),
    camera_id: "C197",
  };
  const countingResponse = await getPeopleCounting(req);

  // return response;

  var responseArray = [];
  for (var index = 0; index < countingResponse.timestamp.length; index++) {
    var responseObject = {
      timestamp: countingResponse.timestamp[index],
      num_in: countingResponse.num_in[index],
      num_out: countingResponse.num_out[index],
    };
    responseArray.push(responseObject);
  }
  // console.log("responseArray", responseArray);

  // Insert To Database
  const table = new sql.Table("EMS_Model6_Result_TEMP");
  table.create = true;
  table.columns.add("timestamp", sql.DateTime, { nullable: false });
  table.columns.add("num_in", sql.Int);
  table.columns.add("num_out", sql.Int);

  dayjs.extend(utc);
  responseArray.forEach((item) => {
    table.rows.add(
      dayjs.utc(item.timestamp).local().format("YYYY-MM-DD HH:mm:ss.SSS"),
      item.num_in,
      item.num_out
    );
  });
  let pool = await ConnectDB();
  var request = pool.request();
  try {
    const result = await request.bulk(table);
    // console.log("result", result);
  } catch (err) {
    // console.log("INSERT INTO TEMP Error", err);
  }

  var insertSQL = `INSERT INTO EMS_Model6_Result (timestamp, num_in,num_out) SELECT timestamp, num_in,num_out FROM EMS_Model6_Result_TEMP WHERE Timestamp NOT IN (SELECT timestamp FROM EMS_Model6_Result)`;

  try {
    const result = await request.query(insertSQL);
    // console.log("result", result);

    var removeDataSQL = `TRUNCATE TABLE EMS_Model6_Result_TEMP`;
    const removeResult = await request.query(removeDataSQL);
  } catch (error) {
    // console.log("INSERT QUERY error", error);
  }
  return responseArray;
}

const model5ExampleResponse = {
  timestamp: ["2023-09-06T16:25:35"],
  actual_solar: [
    "8002636e756d70792e636f72652e6d756c746961727261790a5f7265636f6e7374727563740a7100636e756d70790a6e6461727261790a71014b00857102635f636f646563730a656e636f64650a7103580100000062710458060000006c6174696e317105867106527107877108527109284b014b1885710a636e756d70790a64747970650a710b58020000006638710c898887710d52710e284b0358010000003c710f4e4e4e4affffffff4affffffff4b0074711062896803581f010000c2a0c393063a6dc2a01840c3b00c3848c28e6811c380c39d671710c29b4ac3abc2bf7129c2977229c297c382c2bf295cc28fc382c3b528c39cc2bf2d5fc292c385c3b82bc38fc2bfc3a366c2a149c38d07c3a0c2bfc381c3b5285cc28fc382c39ec2bfc3bac2a9c3b1c3924d62c39cc2bfc2bbc38dc2b1c39b1cc2bbc3a1c2bf5e7321694ac385c399c2bf24c38853c2823c25c3a0c2bf38c2811338c28113c388c2bf36c295c286c29cc3bbc3ac00c380c2be58c3b2c28b25c2bf3740c29d2dc395c399522d5440c2b4c28a49c2abc298c3b86240055bc2b0055b007440c38046c3bc6bc384757e403f355ec2ba49c3b17b40c2bdc2b2c3802b0bc3aa7e40c3a92a481c5e1f7740c29ac299c299c299190a6d40c292c2a654c29c7d48694071116805867112527113747114622e",
  ],
  actual_load: [
    "8002636e756d70792e636f72652e6d756c746961727261790a5f7265636f6e7374727563740a7100636e756d70790a6e6461727261790a71014b00857102635f636f646563730a656e636f64650a7103580100000062710458060000006c6174696e317105867106527107877108527109284b014b1885710a636e756d70790a64747970650a710b58020000006638710c898887710d52710e284b0358010000003c710f4e4e4e4affffffff4affffffff4b0074711062896803581c010000c2866118c28661c2b5c29d40c399505e4379c2b1c29f407bc399c38ac3a03f54c2a440c2bbc280c398541ac29dc29540c38a5606c3bfc28905c29540c38dc38cc38cc38cc38cc385c29740c386577cc3855707c29c401fc285c3ab51c2b8c29ec29940c3be1373647ac2a7c29840c280c28dc3b8c397c28836c29f406666666666c2bbc29740c38a1dc2a0c39c01c2b0c294401dc2bbc38dc2b1c39bc2bfc29b40c2b8c38f2e20365dc29d4015240ec2afc2bdc381c2a1402b41c29e126459c29d4026c3a344324e76c29f4045175d7451c3bcc29d40c3b0c38a02c2af2cc3a9c2a24040c394c3b4434d2ac29a400e6bc39fc2b0c3b6c29bc2a140c3a03f3147c2a6c2a6c29f403c40c2b903c2947ec29f4004c39819370b43c2974071116805867112527113747114622e",
  ],
  actual_suggest: [
    "8002636e756d70792e636f72652e6d756c746961727261790a5f7265636f6e7374727563740a7100636e756d70790a6e6461727261790a71014b00857102635f636f646563730a656e636f64650a7103580100000062710458060000006c6174696e317105867106527107877108527109284b014b1885710a636e756d70790a64747970650a710b58020000006638710c898887710d52710e284b0358010000003c710f4e4e4e4affffffff4affffffff4b0074711062896803583b010000c2b25ac39e18c381c29cc29dc380c3a6c288c2a6c391c3a1c382c29fc380c3b1c39a7bc28ac3b455c2a4c3807415240ec2afc29dc295c380c3807f62c28e4c07c295c38060c3b9c2922cc386c386c297c380c3b3c28b25c2bf5809c29cc380c2ae47c3a17ac2a4c2a0c299c380194350c28940c2a9c298c380c2ba03c2943bc38038c29fc3807dc3b80cc2bb02c2bdc297c380436830c28406c2b2c294c380c2b97bc3974dc29cc380c29bc3800313c3bdc29dc2ac65c29dc380643fc3b6633fc292c2a1c38051c3ae00c3a5c28e16c29cc380c390c2b1c39b1c3b17c29dc380c28400c3b1c2b23ac3bcc298c38030c2840643c3a834c29ec380c3b0465dc395c3ba2dc293c3806dc2a9c38ec2966a7dc29bc38026351fc380c38ec39ec299c380090dc286c39050c39dc29bc3803243c28fc283c3bb19c294c38071116805867112527113747114622e",
  ],
  predict_solar: [
    "8002636e756d70792e636f72652e6d756c746961727261790a5f7265636f6e7374727563740a7100636e756d70790a6e6461727261790a71014b00857102635f636f646563730a656e636f64650a7103580100000062710458060000006c6174696e317105867106527107877108527109284b014ba885710a636e756d70790a64747970650a710b58020000006638710c898887710d52710e284b0358010000003c710f4e4e4e4affffffff4affffffff4b007471106289680358b2070000c2a4c283c29fc387c38f3ec283405dc289c3abc2a933c288c28540c29449c28d5e3a17c28a40c2807f38c2b273c280c28740c39cc295c2817f6b00c28740c3bbc2bbc3814ac39cc2a2c2804064c28dc3b047c3ad3e7640c2956e5070c29cc2b44f402045c38435c3aa4f0e40c393c290c39ec38d5e550240c2a375c387c39603370240c2b4c3a778c2b6124f0240c39dc2b9c3be0363290240c28bc28c460dc2b7c3b30140c2b53676413fc394c395c2bfc38bc399c29a6d54c3abc397c2bf15c2965121c38dc38fc398c2bfc2ab3c4a5bc3a22cc396c2bf771b2421c2870fc393c2bfc3b876c389c3a4c2a118c38bc2bf304e63c3ab25543940c2a94f70381fc28e63407bc3a24b1fc3a7137240c2984b71c3bfc38ac2bb7f40c3bc28c28034c3bd76c28140c2964675c2a81564c28240c2b5c28ac387c2870056c2834022c3a7c28d64c3ba5cc2814011c3a4176b28c383c283406070197855c29e7640c3b9c2b1c3aa7ec2ba217740306b46c39521c3ad474049c3bcc2ab6a0fc2a80240c387c288c3a80ac3be04024007c3be0a41c394c3850140256c34c2a9c387c3ae014073c2b4c3a2c2966bc2be0140c3a864c3bac2a92b7e0140c3a5c3aac2b26858c387c39dc2bf6dc2a5c390036ec296c3a1c2bfc392c286c2a5c2aec2bbc399c3a0c2bfc3b023402739c38fc39fc2bf7144c39cc281c3b416c3a6c2bf29c3b265c39b53c3a6c3adc2bfc283c39fc3a2c29fc2a9c3a737400a5cc388647a3461400bc2bac29d253057694031c3bfc29dc38c6c0b7640c39bc38ac38d3cc29dc29c754050c2b2c2b01fc29d18784040c28c65c2b940c3b77740c2bb330537c299c2877640c3984c15c38fc3a8697c4061c3aa7f46014f754007c28206c2b2c2ab2d72400fc393c390c3b3c2a4494540c3a3c39ec3acc393c395000240c298c289034b60c388c3b93fc3bbc3a8c28bc2b4c3a140c3b83fc3991915c3bec28d76c3ba3f0114c3a54b3827c3b93f5c072572c2b80fc3bb3f60c3b0c39243c29357c395c2bf60c2b7c3bac2b1c2be41c398c2bf6b626bc28ac2a8c3a6c398c2bf5d75c2bdc2b653c398c397c2bf3061c2bb73c2b219c39ac2bf39c2a0285bc28711c3a0c2bf21527615c2bdc28a3f40570e73c3bcc2a63e694015c2a44cc3a02770724063c3bb33c2bdc3b0c2827e404fc38dc39d3ec28ec2a7c28040c399c3a962c3be107fc282406d22c296c3a7c295c280c28540c2b069c39a5cc38f4fc285406d1fc2962d7277c2834061c2a171c3901257c28040c3942dc2b710c394407140c395c38b136dc3830c4840c397416cc38255540340c29375c29118543ec3bb3fc290c38e302a0751c3b93f53c2872ec2b466c2a6c3ba3f2c0bc3bdc291c29a78c3b93f18c3a15a61107bc3bb3fc3b746c38bc2bf7ac3b6c394c2bfc2afc3bac38ac3b14677c396c2bf307741c38808c29ec39bc2bfc2b5c3a7274cc2ad12c39dc2bfc3a01ac2b4c3bb06c295c398c2bfc2a90725c289c38542c3acc2bf5dc2821f1d5fc2894340c3b7c3a8c39666c3bf346b4024c2a621c39b74c38075406ec2a8c297c39c38c280c2824013c290c389c38e231dc283404b5d69c28dc28f7ec2854058c38d59042e2bc289405bc2bd78c29f39c294c28740c298c2a7c2a14ec3b9c398c285405fc38dc3bac283c294c281c28140c3b30732c2a0c3b0c28f7440030fc396625b295140c3a13f08c38961c38c0040c38375c38bc39c663e0140c28401c381c38ec28e690040c385c2a9132953c3bac3bc3fc3a4c2bcc28539c2b9c2bbc3b63fc28305c2b46d4170c3b73fc3ad74c39a530a2cc3aec2bf4cc2922d02c3bc7bc3afc2bf03c3925f0d27c281c3a0c2bf6d1f4c685ec29dc398c2bfc2b5c38558592ec2bac394c2bfc3bb7b5fc39c177dc392c2bfc297c2b5732ac2b5543c40c3af42c38c76c2b2c29b68401b72c2b0c3a707c3b07340146e18c29fc3a7767a404bc2a30e1877c2917c40283e297c13597f40735b7e4fc2b8c2a9c2824047c3887a71013bc28440c3bbc2b31dc3a25b0bc285406523c38ec2ba3f45c2814068c381c29330c2832a7340c29872c3b5c3b6c285c38a5640c291c398c39ec28d641b06406ec284c383c3ae53c3890140764fc2a35e25410140c39c09c2b6392dc38e0040c287c3894ec39fc3bdc39d0040c2913e59c3a720c2b00040c28fc29fc39bc28cc3a6c3b6c3a4c2bf297576c2a5c29bc2a7c3a4c2bf6cc3bac2bac39e3bc28dc39dc2bf732b060c0f65c39bc2bfc2b0c285126fc3be10c399c2bf6bc28e2c6964c399c391c2bf6b5dc3be04c2b3c29f3a400bc3af4bc2bd28c3bc684025516e37c2b4c3b9774075c2b0c3b8c383c39453c28140c29dc2b0c3b1624054c282401dc28e61c2a826c393c2814014c3b5c29b7212c3b6c28540c3b5c28a2cc3afc3ae46c28740c2abc383c3861e7251c287401b5ac29fc3b2c296c3abc2824068524307c3986e73406fc3941ac382011755400843c3afc389c2bd3309407568c38ac2a452c39f0140072ec3b9384cc2bb004030732f3c07c388c3bd3fc3bdc38854090337c3b83f7bc29c4702c3a1c3abc3b73fc2b45673c2b108c2b9c3aec2bf4dc2ba28c2a7c3b50bc3a8c2bf3bc28f5640c3b030c39bc2bf1bc297c2afc39074c2bfc394c2bf7676c296c2a1c284c2b4c390c2bf3c3274c39767c3bec385c2bfc2833cc3b2201d3e3740c2937634c3b00a146840c2b33cc3b9c29ac3b6c2bb7940c3aac3aa1dc2b5c3b1c292c2844071116805867112527113747114622e",
  ],
  predict_load: [
    "8002636e756d70792e636f72652e6d756c746961727261790a5f7265636f6e7374727563740a7100636e756d70790a6e6461727261790a71014b00857102635f636f646563730a656e636f64650a7103580100000062710458060000006c6174696e317105867106527107877108527109284b014ba885710a636e756d70790a64747970650a710b58020000006638710c898887710d52710e284b0358010000003c710f4e4e4e4affffffff4affffffff4b007471106289680358c8070000c38dc2b5c29b01c38171c29440c29ac38602c3b1c28b20c29540242043c28bc3b8c38cc297402d2ec2b65fc28dc29cc297406f672d72c2854ac29940c3b9601534c39616c299405b3bc39dc2b5c29dc3b0c29840703dc39bc3bdc39ac288c297400bc2af6ec3aac3b4c3b8c29340c3ab047dc2bbc38d5fc28e40c3adc3abc3b0c2902ec3a5c28d406dc3b726c38e5a5ec29140176d4e391a53c29040c2a5c3941a315535c29040c29855c2adc3961d27c28a4017c2824526c29dc3a9c288407c15355b23c283c28940c3a01c787136c297c28a4008c2a2c286c3a744c2b1c28a40c38fc2a313c398c2b94cc28840c3bb00c287c29343c3acc288405bc3be02c3a6c2a13fc28740c3bc494604c2bec3afc284403cc393c386c38931c29dc2864076c29bc39a322bc289c28240c39773c2964c7344c28140385604c2bb5b0cc283407dc2bf0034c29946c2874058c395c2bc7f16c38fc2914010c3a2c3ac19c2b55dc293407bc293c2a519337cc29340455479325dc38ac2934003c2bfc3a6503ec2b2c29340373062c2914949c29240c3bc457007c39a5dc28f404cc28dc2b1c294c3a4c29ac292405a2cc3b2c2b77ac39ec29240793556c3a4c2a402c29340c283c29378771e14c294402851c3806b0b46c293406bc391c394c2b10373c295405dc2a52a1fc387c288c29340c28b6e27022ec381c29440c290c3bec2bd01c3ac6ec29340c2b1c2bfc3bcc39128c2a1c29140351236043c2ec2864064391ec3ab6f467d40c2816a4974c2a2747c407367176b52717a40c2a8114ec29dc3b03f7c407d5cc2a0c2b9c2a25b7940c3991f005971147e40c2a0c3866fc3a63031c2864000c38ec38bc3a2483ec2854040c28c22c2b7c3930bc28540c2bdc3bec3b9315b2dc285401cc38922c3a153c3a6c28740c3b5c2892976071ec28d40c3b3c2af1c63c38077c29740c294c3a7614e372dc29840c3b511c3b0c2801bc289c29840c390c39a27c39e2202c29b406fc3b6c3ba38c3b1c393c29940c3904c42c3a1c38ac28cc29940557ac3ab3bc3865cc29940c3a040c39c5f5a59c29940c2b1c391c2a845c3b5c3b5c29740092109c28b1fc2bcc296406bc3be286fc3a81cc2974018c2a91cc395c3b2c3a4c295402867c39e0e7a7dc29640c290c39dc39d210fc288c297407fc382c39bc2ab0921c297400fc3b2c2840251c3abc29840c3a57446c38cc2a04fc29840c2a3c2a52f1ec2bf4fc29840c284c3b8c288c2bbc3bb23c298405bc28a2b427ac381c295405ac3bd78c2894a30c29540c2b80cc2b21b4dc2b1c2934058c3a3514c3c69c29540c284c288c28917c38c24c29440c3bb727ec2bcc2b137c2964054c390c2840b1008c2994013c3a22ec2a301c287c29940c39d4d312dc3a753c2994020c39c2220c394c38ac296405bc282c2bac2b753c2bac29940546e2d0ac3b53bc29a40c2bd55c2a1c29dc39fc3abc29a40c2b0c39805c2bec39ac386c29a4035c2860d5637c2a0c29840181a183162c3afc29840c2adc287c2b5c2bcc2bfc391c29740c3b353c3b317c29dc2bfc298407fc3a4c2ab014fc2a1c29840c3b5c39c56510c42c29740c28d4bc39cc3b9c3a0c39ac2964025c2a4c3905f1f39c29940c280c2a306c28ac2b9c39fc29840c288c29ec28f07c2a8c2a6c29740396c49c3bd431dc298405305c294c2bb4b67c29740c38779c2bac2b2c3bf3fc29740c3a4c3bdc29951c2a376c29840c3b3c3b62cc3811fc29bc29840217339c3820dc281c2984045c3b0c2a273c39e53c29b40c39950c2883a1dc3bbc299402bc3b3c2b2c3adc38ec290c299404bc2a2c3b90641c3b7c29c40c29dc2b751c280c28c0cc29c407dc2bdc3a1c39d374cc29d4011c394c3a0c393c3b871c29d40c2a8c29c1fc3a00b01c29d405b78131dc29600c29a406b39c3bac292c386c3a1c29840c2af2bc2ba74c39641c29440032d283728c39ec29540c3a40a42c289c2bfc3bec29540c29718c2ba27c3b06bc29440c38018c2af7dc29547c29440c38569c394c2aa5b55c294405927c29971455ac29240c3a802c39c555bc2a0c29440c2a7c2afc3924263c2a2c29840740bc296c289c3b1c2abc29840c39b47c3856dc2ac4fc297400063c3a3c385c3af14c297404d6dc298c2bdc39b04c296403dc3a6c3bcc394c2b56fc29640143fc2b624c28fc3bec297405066c3adc38ec3bbc388c297403976c2b7c3a7c288c2aec29740c2807f5e461157c29a404dc285c2b23e32c28dc29940387554c3afc3b86dc29a404bc3be40c3acc39c06c29b40c2a8c287c2bfc2ba4973c29b40c2944119c2b011c386c29940c28b63c394c39028c2b9c2994073c2a957c2ac47c2b4c294400827c28d482c6ac2954060c2a1c3867f7d1dc2964073c29fc2bd53545cc295401b5cc384001424c29540c283c29663c3a7c2bd44c2954046c2a2c28d7062c288c294403cc39271c284c2a4c29ec29540c38bc3b3227c6cc2bdc2974063c3b44bc38ac2b4c386c29740c287c384c29715633ac2964023c2b117126007c29640c290240c3ec3bbc39ac294405bc39d130f1ec2b2c29540c3adc3a3c2bbc380c2a74ec297402040c2bb29c3b3c2a3c29740c2a51c397a3b3dc298405bc3bac395c3a6c29e2cc29940c289c381c3a24dc28cc28dc29940c2a01d30c3bcc280c29ec29940207ec38f2ac2bbc2b0c29840c2a749024803c394c29940c2b879c38355c29a3bc2984023c2a418c28e407ec29a40c2ab58187952c39fc29740c28708c389c3a76ec297c296406507c2b2c3aac3a46bc2974071116805867112527113747114622e",
  ],
  predict_suggest: [
    "8002636e756d70792e636f72652e6d756c746961727261790a5f7265636f6e7374727563740a7100636e756d70790a6e6461727261790a71014b00857102635f636f646563730a656e636f64650a7103580100000062710458060000006c6174696e317105867106527107877108527109284b014ba885710a636e756d70790a64747970650a710b58020000006638710c898887710d52710e284b0358010000003c710f4e4e4e4affffffff4affffffff4b0074711062896803587b080000c3b6c3a7c2973bc2b2c2a4c285c380c397031a38c3a4c2b8c284c380c2b4c3b6c3b8c2b7c2b6c282c285c380c39ac39c330dc2a7c2b8c287c3800239c39964c29fc294c28bc380c3bcc282c2b40e68c385c290c3800218c3a163c3a260c293c380c3bbc2b9581a36c28bc296c380c3a8c38c53c3b5c38cc3a9c293c3805a26c2af5c784dc28ec38077241ac28dc3b7c392c28dc380c3b9c2bac38b443355c291c380c2ba6dc38cc287054ac290c3805f31c294555b2cc290c3805fc284c2955ec39829c28ac3807235c393c290c29ac3acc288c380c2af3fc399543dc286c289c38028c286c3830dc3bcc299c28ac380c28bc3866ac398c2a6c2b3c28ac38066c3b031626b4ec288c380c28ac3a62b64c2a221c288c38071c3aac3a6171a5cc282c3807dc2b140c3a9c294c38b77c380c380c2b5382831c3bd6ac380c2a027c2a7c3a5c39f2241c380c3b02bc3adc2bd25c3ba4140401fc38d30336922406c61c38b3d7bc2a667c3803ec28dc3832809c2b67fc380c3b00bc38d773f6cc28bc380c3bac38dc395c3b3c28867c28bc380c3ac20c38f23c3b40ac293c38005693149c3aac2a8c293c380c3b3c2bb5c124740c292c380c3be3a2f33144cc28fc38016c3b3c39c30c3adc291c292c38000c2bb26c282c29bc395c292c3804738c281c38ec3a5c3b9c292c380c2b21ec3bfc3acc3ba15c294c3803dc38bc280393e48c293c3801cc2a64ac3a91e75c295c3805f19c2bd12c384c28ac293c38014c2aac2b7c3a0c3b0c383c294c3804e6b39c38cc2a872c293c38033347d2bc28a41c291c38032c3bb036b1dc3a1c281c3805e5c4fc398c397c29a70c38040c2adc2adc29ec396c2a459c380607226c2b9c3945253c380607d75c3b64dc29d50c380c39003c2ad03204636c38078c2b0c3abc28760335ec380c390c280c294c3bbc3b1c3b06fc380c29fc2b1177fc2902d75c38079c2963ec2bcc3bbc3a977c380c28cc3b1c2bcc3a2c380c398c283c3803dc39c4e0b53c394c287c380300804462311c28dc380c3b9c28cc2af2ac2b071c297c3804e62c3a2c2aac29926c298c380c2b018c39dc2b2c391c282c298c380c28e510bc3b05ec3bbc29ac380c29e332fc2b246c395c299c3807b6c2dc3bd4ec28ec299c3800b2174c2a6545ec299c380c2b7c2ac17c3a5c3975ac299c380670dc390c3a0c296c3b7c297c3801dc286c3b4c2bb21c2bec296c3802225c3937ac2bdc29ec296c3804d47c28ec3b51dc2bdc292c380233ec38b1670c3a1c291c3806ec2bd21c3a5c2a5c38ec28fc380c2afc2b7c39918c285c29ac28dc38045c3bac2a606c29157c28fc3805dc387c3b6c2b0c2ab1ec28bc380c296c3a1c284c39fc2ae4fc28bc380c29bc3917b49c285c390c28cc3805573c3a5c2b3c3a12bc28bc380c3a5314bc28515c3a0c290c380596e4900c3a7c3b0c292c38037c2ad7021c2925fc295c3802764c283c282c3bc1dc294c380c387c3a6c2b37a5d31c296c380c2b2c384c397716601c299c380c39062c28a7cc2a3c280c299c38025c3b71869084dc299c380c394c398c38ec28723c38cc296c3800bc29f292cc2bbc2bbc299c3806bc3b2c2b9c3aac2ae3dc29ac3803b1876c388c2b0c3adc29ac380c3b2c293750e64c388c29ac380c396c2aac2bec2aec2bfc2a3c298c380051e2f381753c298c380c28ec2aac39ac38f1f6bc294c3806ac3aa2ac3a17f4fc293c380c29020c3802665c382c28ec380c39729c3a4c393c3b466c28bc380c38f394f663237c288c380c3b27a47c2bb1047c289c380c2a5c289c29474392bc28ac38078c2957dc3805674c289c380130bc29876c3b3c2b8c28ec38056c283c287c2934f43c292c380c39718c28dc3bc692dc296c380c38479c2b5203d6ec298c38038c291c2bec28dc280c292c298c380c2a012c392c3bac39878c298c3805bc2abc398c39ec29f4cc29bc3806ac3af394c6ec3b5c299c3802ac28657c39dc3b2c28ac299c380c29a1d44c28806c3bbc29cc3804fc3bdc391c3bf7b10c29cc3807769c38302484ec29dc380c39358c387c2a9c28273c29dc380343205c2835702c29dc380533ec291c3aec2bd01c29ac380c2956a50c2be7370c298c38051c2a3c3a025602ec291c3807c103c3d26c3a2c290c380c2bec39ec3b7420bc382c28ec380c288c39f6cc38324c28fc28ac3806cc292493dc2a1c3a2c288c38017782a06c3bf00c286c3806bc286c2b771c28979c280c380c39551c29ac3895a35c284c380c3a93bc397c38ac286c3bfc28fc3801a1b71c2bd50c3a1c293c380c2b2c3b0550e04c3a3c295c380c29473c29c13c3a209c297c380c28b0bc2a113c3b7c3bbc295c380c295c2944d421567c296c3800f64190e28c3b6c297c380c3abc2bec3bdc38fc28cc380c297c380c29ac38943c39730c2a6c297c380c3b41a3023c2b059c29ac3801c342732c387c28fc299c380c3a86012c383c3916fc29ac380c2aec2be313dc29308c29bc380c39078c2a6c38ac39a74c29bc3805dc3945f462fc387c299c380156ac38004c2aa4ec299c380c2922bc2aec294c382c294c291c3807e2563757ec397c28ec3804bc292c2943b26c3a7c28ac38049c28ec289446864c288c380192a27590175c288c380c3b2372b5c69c293c284c380c297c2b9c3aec3b1c395c389c281c380c38dc3a01cc3aac396c3abc283c3807bc28dc2a60542c28fc28cc380c3891f7bc388c3bec3aac292c380401776c3b9c3b2c3a8c294c380c281c2b93233c386c3bac295c3805cc2bfc2b9c2940bc392c294c380c38460c3b768c380c2a9c295c38010c398c3acc2be3547c297c380c3aec3aac3b868c3a5c29dc297c380c2bec28ac3b8c2814037c298c380c38628c3ac077630c299c380c2a0c2a6c297c38cc28dc290c299c3800923340b34c2a0c299c38019c2891c2207c2b2c298c3800e634cc2900ec395c299c3805a3502494a3cc298c38031c39bc294194821c29ac380c399c389111bc391c39cc294c3805ac2b90a417128c290c380c3a0234620c39844c28ac38071116805867112527113747114622e",
  ],
  peak_hour: ["yes"],
  has_error: ["no"],
  error_message: [null],
};
const exampleResponse = {
  timestamp: [
    "2023-09-01T09:00:39.203000",
    "2023-09-01T09:00:39.835000",
    "2023-09-01T09:01:02.944000",
    "2023-09-01T09:01:04.398000",
    "2023-09-01T09:01:04.519000",
    "2023-09-01T09:01:28.621000",
    "2023-09-01T09:01:29.752000",
    "2023-09-01T09:01:31.536000",
    "2023-09-01T09:01:38.949000",
    "2023-09-01T09:01:43.363000",
    "2023-09-01T09:01:51.512000",
    "2023-09-01T09:01:56.235000",
    "2023-09-01T09:02:13.478000",
    "2023-09-01T09:02:19.411000",
    "2023-09-01T09:02:24.672000",
    "2023-09-01T09:02:37.836000",
    "2023-09-01T09:02:39.407000",
    "2023-09-01T09:02:42.012000",
    "2023-09-01T09:02:48.272000",
    "2023-09-01T09:02:48.483000",
    "2023-09-01T09:02:58.922000",
    "2023-09-01T09:02:59.953000",
    "2023-09-01T09:03:00.416000",
    "2023-09-01T09:03:07.828000",
    "2023-09-01T09:03:19.178000",
    "2023-09-01T09:03:35.833000",
    "2023-09-01T09:03:37.722000",
    "2023-09-01T09:04:10.521000",
    "2023-09-01T09:04:13.077000",
    "2023-09-01T09:04:32.172000",
    "2023-09-01T09:04:34.118000",
    "2023-09-01T09:04:49.568000",
  ],
  num_in: [
    0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1,
    0, 0, 1, 1, 0, 1, 1,
  ],
  num_out: [
    1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0,
    1, 1, 0, 0, 1, 1, 0,
  ],
  peak_hour: [
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
    "yes",
  ],
  has_error: [
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
    "no",
  ],
  error_message: [
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
  ],
};
