"use client";
import React, { useMemo } from "react";
import {
  ResponsiveContainer,
  ComposedChart,
  AreaChart,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  Bar,
  Area,
  ReferenceLine,
  Line,
  Brush,
  CartesianGrid,
} from "recharts";

export default function EnergyTrendChart({ type, dataProp }) {
  if (!dataProp || !dataProp.timestamp || dataProp.timestamp.length === 0) {
    return (
      <div
        style={{
          width: "100%",
          height: "400px",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          fontSize: 16,
          color: "#888",
          // background: '#f9f9f9',
          borderRadius: 12,
          border: "1px solid #ddd",
        }}
      >
        No data available
      </div>
    );
  }

  // แปลงข้อมูลจาก object เป็น array ของ object ที่เหมาะกับ Recharts
  const data = dataProp.timestamp.map((timestamp, index) => ({
    day: timestamp,
    consumed: -1 * (dataProp.consumption?.[index] ?? 0),
    generated_mirror: dataProp.generation?.[index] ?? 0,
    purchased_mirror: dataProp.powerFromGrid?.[index] ?? 0,
    energy_base_line: -1 * (dataProp.energyBaseline?.[index] ?? 0),
  }));

  const maxY = useMemo(() => {
    return Math.max(
      ...(dataProp.consumption ?? []),
      ...(dataProp.generation ?? []),
      ...(dataProp.powerFromGrid ?? []),
      ...(dataProp.energyBaseline ?? []),
      0 // กันกรณี array ว่างทั้งหมด
    );
  }, [dataProp]);

  const getTextWidth = (text, font = "12px sans-serif") => {
    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");
    context.font = font;
    return context.measureText(text).width;
  };
  // คำนวณความกว้างของ label แกน Y แล้วปรับ margin.left
  const leftMargin = useMemo(() => {
    const longestLabel = (-maxY).toLocaleString(); // เช่น "-12,345.67"
    const width = getTextWidth(longestLabel, "12px Roboto");
    return Math.max(40, Math.ceil(width + 10)); // padding 10px
  }, [maxY]);
  const renderUnitLabel = () => (
    <text
      x={80}
      y={15}
      fill="currentColor"
      className="text-black dark:text-white"
      fontSize={15}
      fontWeight="bold"
    >
      {["month", "year", "lifetime"].includes(type) ? "kWh" : "kW"}
    </text>
  );

  if (type === "month" || type === "year" || type === "lifetime") {
    return (
      <ResponsiveContainer width="100%" height={300}>
        <ComposedChart
          data={data}
          stackOffset="sign"
          barCategoryGap={10}
          margin={{ top: 40, right: 0, left: leftMargin, bottom: 0 }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="day" />
          <YAxis domain={[-maxY, maxY]} tickFormatter={(v) => Math.abs(v)} />
          <Tooltip
  formatter={(value, name) => [
    `${Math.abs(Number(value)).toLocaleString()} kWh`,
    name,
  ]}
/>


          <Legend />
          <ReferenceLine y={0} stroke="gray" strokeDasharray="" />

          {renderUnitLabel()}

          <Bar
            dataKey="consumed"
            stackId="energy"
            name="Energy Consumed"
            fill="#FFB74D"
          />
          <Bar
            dataKey="generated_mirror"
            stackId="energy"
            name="Generated by PV"
            fill="#81C784"
          />
          <Bar
            dataKey="purchased_mirror"
            stackId="energy"
            name="Purchased from grid"
            fill="#4FC3F7"
          />

          <Line
            type="monotone"
            dataKey="energy_base_line"
            stroke="#E53935"
            strokeWidth={2}
            dot={true}
            name="Energy Baseline"
          />

          <Brush dataKey="day" height={30} stroke="#8884d8" />
        </ComposedChart>
      </ResponsiveContainer>
    );
  }

  // Default = daily (AreaChart)
  return (
    <ResponsiveContainer width="100%" height={300}>
      <AreaChart
        data={data}
        margin={{ top: 40, right: 0, left: 40, bottom: 0 }}
      >
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis dataKey="day" />
        <YAxis domain={[-maxY, maxY]} tickFormatter={(v) => Math.abs(v)} />
        <Tooltip
  formatter={(value, name) => [
    `${Math.abs(Number(value)).toLocaleString()} kW`,
    name,
  ]}
/>

        <Legend wrapperStyle={{ marginBottom: -20 }} />
        <ReferenceLine y={0} stroke="gray" strokeDasharray="" />
        {renderUnitLabel()}

        <Area
          type="monotone"
          dataKey="consumed"
          stroke="#FB8C00"
          fill="#FFE9CA"
          strokeWidth={2}
          name="Consumption Power"
        />
        <Area
          type="monotone"
          dataKey="purchased_mirror"
          stroke="#808080"
          strokeWidth={2}
          fill="#fff"
          name="Power from grid"
        />
        <Area
          type="monotone"
          dataKey="generated_mirror"
          stroke="#008001"
          fill="#deede8"
          strokeWidth={2}
          name="PV Power"
        />

        <Brush dataKey="day" height={30} stroke="#8884d8" />
      </AreaChart>
    </ResponsiveContainer>
  );
}
