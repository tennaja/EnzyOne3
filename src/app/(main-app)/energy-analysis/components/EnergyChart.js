"use client";

import React from "react";
import {
  ResponsiveContainer,
  ComposedChart,
  AreaChart,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  Bar,
  Area,
  ReferenceLine,
  Line,
  Brush,
  CartesianGrid,
} from "recharts";

const rawData = [];

for (let day = 1; day <= 3; day++) {
  for (let hour = 0; hour < 24; hour++) {
    const hourStr = hour.toString().padStart(2, "0");
    const time = `${day.toString().padStart(2, "0")} ${hourStr}:00`;

    const consumed =
      hour >= 6 && hour <= 20
        ? 80 + Math.floor(Math.random() * 50)
        : 60 + Math.floor(Math.random() * 20);

    const generated =
      hour >= 7 && hour <= 17
        ? 40 + Math.floor(Math.random() * 50)
        : 10 + Math.floor(Math.random() * 10);

    const purchased = Math.max(consumed - generated, 0);

    const baseLineValue =
      85 +
      Math.floor(Math.sin((day * 24 + hour) / 5) * 10) +
      Math.floor(Math.random() * 5);

    rawData.push({
      day: time,
      consumed,
      generated,
      purchased,
      energy_base_line: baseLineValue,
    });
  }
}

const data = rawData.map((item) => ({
  day: item.day,
  consumed: -item.consumed,
  generated_mirror: item.generated,
  purchased_mirror: item.purchased,
  energy_base_line: -item.energy_base_line,
}));

const maxY = Math.max(
  ...rawData.map((item) => item.consumed),
  ...rawData.map((item) => item.generated + item.purchased),
  ...rawData.map((item) => item.energy_base_line)
);

export default function EnergyTrendChart({ type }) {
  const renderUnitLabel = () => (
    <text
      x={40}
      y={15}
      fill="currentColor"
      className="text-black dark:text-white"
      fontSize={15}
      fontWeight="bold"
    >
      kWh
    </text>
  );

  if (type === "month" || type === "year" || type === "lifetime") {
    return (
      <ResponsiveContainer width="100%" height={300}>
        <ComposedChart
          data={data}
          stackOffset="sign"
          barCategoryGap={10}
          margin={{ top: 40 }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="day" />
          <YAxis domain={[-maxY, maxY]} tickFormatter={(v) => Math.abs(v)} />
          <Tooltip formatter={(value) => Math.abs(value)} />
          <Legend />
          <ReferenceLine y={0} stroke="gray" strokeDasharray="3 3" />

          {/* Add kWh label */}
          {renderUnitLabel()}

          <Bar
            dataKey="consumed"
            stackId="energy"
            name="Consumed by appliances"
            fill="#FFB74D"
          />
          <Bar
            dataKey="generated_mirror"
            stackId="energy"
            name="Generated by PV"
            fill="#81C784"
          />
          <Bar
            dataKey="purchased_mirror"
            stackId="energy"
            name="Purchased from grid"
            fill="#4FC3F7"
          />

          <Line
            type="monotone"
            dataKey="energy_base_line"
            stroke="#E53935"
            strokeWidth={2}
            dot={true}
            name="Energy Base Line"
          />

          <Brush dataKey="day" height={30} stroke="#8884d8" />
        </ComposedChart>
      </ResponsiveContainer>
    );
  }

  return (
    <ResponsiveContainer width="100%" height={300}>
      <AreaChart data={data} margin={{ top: 40 }}>
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis dataKey="day" />
        <YAxis domain={[-maxY, maxY]} tickFormatter={(v) => Math.abs(v)} />
        <Tooltip formatter={(value) => Math.abs(value)} />
        <Legend wrapperStyle={{ marginBottom: -20 }} />
        <ReferenceLine y={0} stroke="gray" strokeDasharray="3 3" />
        {renderUnitLabel()}

        <Area
          type="monotone"
          dataKey="consumed"
          stroke="#FB8C00"
          fill="#FFE9CA"
          strokeWidth={2}
          name="Consumed by appliances"
        />
        <Area
          type="monotone"
          dataKey="purchased_mirror"
          stroke="#808080"
          strokeWidth={2}
          fill="#ffff"
          name="Purchased from grid"
        />
        <Area
          type="monotone"
          dataKey="generated_mirror"
          stroke="#008001"
          fill="#deede8"
          strokeWidth={2}
          name="Generated by PV"
        />

        {/* âœ… Add Brush */}
        <Brush dataKey="day" height={30} stroke="#8884d8" />
      </AreaChart>
    </ResponsiveContainer>
  );
}
